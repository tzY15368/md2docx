
@misc{barrettSMTLIBStandard2021,
  title = {The {{SMT-LIB Standard}}},
  author = {Barrett, Clark and Fontaine, Pascal and Stump, Aaron},
  year = {2021},
  month = may,
  langid = {english},
  file = {/Users/kzns/Zotero/storage/V859828J/Barrett 等。 - The SMT-LIB Standard.pdf}
}

@book{cernySVAPowerAssertions2015,
  title = {{{SVA}}: {{The Power}} of {{Assertions}} in {{SystemVerilog}}},
  shorttitle = {{{SVA}}},
  author = {Cerny, Eduard and Dudani, Surrendra and Havlicek, John and Korchemny, Dmitry},
  year = {2015},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-07139-8},
  isbn = {978-3-319-07138-1 978-3-319-07139-8},
  langid = {english},
  file = {/Users/kzns/Zotero/storage/QWUMNQ2B/Cerny 等。 - 2015 - SVA The Power of Assertions in SystemVerilog.pdf}
}

@misc{liSpecificationFIRRTLLanguage2021,
  title = {Specification for the {{FIRRTL Language}}},
  author = {Li, Patrick S and Izraelevitz, Adam M and Bachrach, Jonathan},
  year = {2021},
  month = sep,
  langid = {english},
  file = {/Users/kzns/Zotero/storage/3ZSTEUGD/Li 等。 - Speciﬁcation for the FIRRTL Language.pdf}
}

@inproceedings{osamaSATSolvingGPU2021,
  title = {{{SAT Solving}} with {{GPU Accelerated Inprocessing}}},
  booktitle = {Tools and {{Algorithms}} for the {{Construction}} and {{Analysis}} of {{Systems}}},
  author = {Osama, Muhammad and Wijs, Anton and Biere, Armin},
  editor = {Groote, Jan Friso and Larsen, Kim Guldstrand},
  year = {2021},
  volume = {12651},
  pages = {133--151},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-72016-2_8},
  abstract = {Since 2013, the leading SAT solvers in the SAT competition all use inprocessing, which unlike preprocessing, interleaves search with simplifications. However, applying inprocessing frequently can still be a bottle neck, i.e., for hard or large formulas. In this work, we introduce the first attempt to parallelize inprocessing on GPU architectures. As memory is a scarce resource in GPUs, we present new space-efficient data structures and devise a data-parallel garbage collector. It runs in parallel on the GPU to reduce memory consumption and improves memory access locality. Our new parallel variable elimination algorithm is twice as fast as previous work. In experiments our new solver PARAFROST solves many benchmarks faster on the GPU than its sequential counterparts.},
  isbn = {978-3-030-72015-5 978-3-030-72016-2},
  langid = {english},
  file = {/Users/kzns/Zotero/storage/Q5NGUD2J/Osama 等。 - 2021 - SAT Solving with GPU Accelerated Inprocessing.pdf}
}

@book{schoeberlDigitalDesignChisel2019,
  title = {Digital {{Design}} with {{Chisel}}},
  author = {Schoeberl, Martin},
  year = {2019},
  isbn = {978-1-68933-603-1},
  langid = {english},
  file = {/Users/kzns/Zotero/storage/NJ8XMCF3/chisel-book.pdf}
}

@inproceedings{vizelFastInterpolatingBMC2015,
  title = {Fast {{Interpolating BMC}}},
  booktitle = {Computer {{Aided Verification}}},
  author = {Vizel, Yakir and Gurfinkel, Arie and Malik, Sharad},
  editor = {Kroening, Daniel and P{\u a}s{\u a}reanu, Corina S.},
  year = {2015},
  volume = {9206},
  pages = {641--657},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-21690-4_43},
  abstract = {Bounded Model Checking (BMC) is well known for its simplicity and ability to find counterexamples. It is based on the idea of symbolically representing counterexamples in a transition system and then using a SAT solver to check for their existence or their absence. State-of-the-art BMC algorithms combine a direct translation to SAT with circuit-aware simplifications and work incrementally, sharing information between different bounds. While BMC is incomplete (it can only show existence of counterexamples), it is a major building block of several complete interpolation-based model checking algorithms. However, traditional interpolation is incompatible with optimized BMC. Hence, these algorithms rely on simple BMC engines that significantly hinder their performance. In this paper, we present a Fast Interpolating BMC (Fib) that combines state-of-the-art BMC techniques with interpolation. We show how to interpolate in the presence of circuit-aware simplifications and in the context of incremental solving. We evaluate our implementation of Fib in AVY, an interpolating property directed model checker, and show that it has a great positive effect on the overall performance. With the Fib, AVY outperforms ABC implementation of Pdr on both HWMCC'13 and HWMCC'14 benchmarks.},
  isbn = {978-3-319-21689-8 978-3-319-21690-4},
  langid = {english},
  file = {/Users/kzns/Zotero/storage/ADIFAPFR/Vizel 等。 - 2015 - Fast Interpolating BMC.pdf}
}

@misc{watermanRISCVInstructionSet2019,
  title = {The {{RISC-V Instruction Set Manual Volume I}}: {{Unprivileged ISA Document Version}} 20191213},
  author = {Waterman, Andrew and Asanovic, Krste},
  year = {2019},
  month = dec,
  langid = {english},
  file = {/Users/kzns/Zotero/storage/P7PYD7D4/Waterman 等。 - Volume I Unprivileged ISA.pdf}
}


